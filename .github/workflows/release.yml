name: Release

# Only runs when you push a version tag like v1.0.0, v0.2.1, etc.
on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest two tags
          LATEST_TAG=$(git describe --tags --abbrev=0)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^ 2>/dev/null || echo "")
          
          echo "## Changes" > CHANGELOG.md
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s" $PREVIOUS_TAG..$LATEST_TAG >> CHANGELOG.md
          else
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s" >> CHANGELOG.md
          fi
          
          # Write changelog to output - ensure no trailing newline issues
          echo "CHANGELOG<<EOF_CHANGELOG" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF_CHANGELOG" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Werewolf ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

  build-and-upload:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: aarch64-apple-darwin
            name: macos-arm64
            asset_pattern: '*.dmg'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: x86_64-apple-darwin
            name: macos-x64
            asset_pattern: '*.dmg'
          - platform: 'ubuntu-22.04'
            args: ''
            target: x86_64-unknown-linux-gnu
            name: linux-x64
            asset_pattern: '*.{deb,AppImage}'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: x86_64-pc-windows-msvc
            name: windows-x64
            asset_pattern: '*.{msi,exe}'

    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Rust setup
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Install dependencies (ubuntu only)
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev

    - name: Install frontend dependencies
      run: bun install --frozen-lockfile

    - name: Build frontend
      run: bun run build

    - name: Install Tauri CLI
      run: bun add -g @tauri-apps/cli@latest

    - name: SQLx offline mode (prepare queries)
      working-directory: ./src-tauri
      run: |
        # Skip if no migrations exist
        if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
          cargo sqlx prepare --database-url sqlite:werewolf.db -- --all-targets --all-features
        fi
      shell: bash

    - name: Build Tauri app
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RUSTC_WRAPPER: ''
        RUSTFLAGS: '-C target-cpu=native'
      with:
        releaseId: ${{ needs.create-release.outputs.release_id }}
        args: ${{ matrix.args }}
        includeDebug: false

    - name: Find and upload assets (fallback)
      if: failure()
      run: |
        # Find built assets
        find src-tauri/target -name "${{ matrix.asset_pattern }}" -type f | head -5
        
        # Upload each asset found
        for asset in $(find src-tauri/target -name "${{ matrix.asset_pattern }}" -type f | head -5); do
          if [ -f "$asset" ]; then
            asset_name="werewolf-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}-$(basename "$asset")"
            echo "Uploading: $asset as $asset_name"
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$asset" \
              "${{ needs.create-release.outputs.upload_url }}?name=$asset_name"
          fi
        done
      shell: bash